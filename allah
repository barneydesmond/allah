#!/usr/bin/env ruby
#
# A god-compatible CLI to daemontools services.

class Allah
	RC_UP    = RC_OK  = 0
	RC_DOWN  = RC_ERR = 1
	RC_OTHER = 2
	RC_TEMP  = 126
	RC_USAGE = 127
	
	attr_reader :svdir

	def initialize(opts = {})
		@args = opts[:arguments] || []
		@svdir = opts[:svdir] || "/etc/service"
		@god_mode = opts[:god_mode] || false
	end
	
	def run
		case @args[0]
			when nil         then do_help
			when 'help'      then do_help
			when '--help'    then do_help
			when 'start'     then do_action(@args[1], :start)
			when 'restart'   then do_action(@args[1], :restart)
			when 'stop'      then do_action(@args[1], :stop)
			when 'remove'    then do_action(@args[1], :remove)
			when 'monitor'   then do_action(@args[1], :monitor)
			when 'unmonitor' then do_action(@args[1], :unmonitor)
			when 'log'       then do_log(@args[1])
			when 'status'    then do_status(@args[1])
			when 'check'     then @god_mode ? 0 : do_status(@args[1], true)
			when 'signal'    then do_signal(@args[1], @args[2])
			else
				puts "Command #{@args[0]} is not valid. Run '#{$0} --help' for usage"
				@god_mode ? RC_ERR : RC_USAGE
		end
	end

	def cmd_name
		@god_mode ? 'god' : 'allah'
	end

	def do_help
		puts <<EOF
	  Usage:
		 #{cmd_name} <command> [arguments]

		 Commands:
			start <task or group name>         start task or group
			restart <task or group name>       restart task or group
			stop <task or group name>          stop task or group
			monitor <task or group name>       monitor task or group
			unmonitor <task or group name>     unmonitor task or group
			remove <task or group name>        remove task or group from #{cmd_name}
			log <task or group name>           show realtime log for given task
			status [task or group name]        show status
EOF
		unless @god_mode
			puts <<EOF
			check [task or group name]         show status and run task checks
EOF
		end
		puts <<EOF
			signal <task or group name> <sig>  signal all matching tasks
EOF
		return RC_OK
	end

	def do_action(svc_or_group, action)
		svclist = scan_services

		ctl = svclist[:groups][svc_or_group] || svclist[:services][svc_or_group]
		if ctl.nil?
			puts "Task or Group '#{svc_or_group}' not found"
			return @god_mode ? RC_ERR : RC_USAGE
		end

		ctl.send(action) ? RC_OK : RC_ERR
	end

	def do_log(svc)
		if svc.nil?
			puts "You must specify a Task name"
			return @god_mode ? RC_ERR : RC_USAGE
		end

		svclist = scan_services
		logfiles = []

		if svclist[:services][svc]
			logfiles = [svclist[:services][svc].logfile]
			if logfiles[0].nil?
				puts "Cannot find logfile for service #{svc}"
				return RC_ERR
			end
		elsif svclist[:groups][svc]
			logfiles = svclist[:groups][svc].services.map do |s|
				if s.logfile.nil?
					puts "Cannot find logfile for service #{s.name} (part of group #{svc})"
					return RC_ERR
				end
				s.logfile
			end
		else
			puts "Task '#{svc}' not found"
			return @god_mode ? RC_ERR : RC_USAGE
		end

		exec "tail --follow=name #{logfiles.join(' ')} | tai64nlocal"

		# This function, if successfully executed, never returns
		raise RuntimeError.new("Can't happen: dropped out the bottom of do_log")
	end

	def do_status(svc_or_group_or_nil, check = false)
		svclist = scan_services

		sgn = :all
		unless svc_or_group_or_nil.nil?
			sgn = svclist[:groups][svc_or_group_or_nil] ||
					svclist[:services][svc_or_group_or_nil] ||
					nil
		end

		if sgn.nil?
			puts "Task or Group '#{svc_or_group_or_nil}' not found."
			return @god_mode ? RC_ERR : RC_USAGE
		elsif sgn == :all
			sts = []
			unless svclist[:ungrouped].empty?
				puts "(ungrouped):"
				svclist[:ungrouped].sort.each do |s|
					st = check ? s.check : s.status
					puts "  #{s.name}: #{st}"
					sts << st
				end
			end
			svclist[:groups].values.sort.each do |g|
				puts "#{g.name}:"
				g.services.sort.each do |s|
					st = check ? s.check : s.status
					puts "  #{s.name}: #{st}"
					sts << st
				end
			end
			return RC_OK   if @god_mode
			return RC_UP   if sts.all? { |st| st == :up   }
			return RC_DOWN if sts.all? { |st| st == :down }
			return RC_OTHER
		elsif sgn.is_a? Allah::Group
			puts "#{sgn.name}:"
			sts = sgn.services.sort.map do |s|
				st = check ? s.check : s.status
				puts "  #{s.name}: #{st}"
				st
			end
			return sts.count(:unmonitored) if @god_mode
			return RC_UP    if sts.all? { |st| st == :up   }
			return RC_DOWN  if sts.all? { |st| st == :down }
			return RC_OTHER
		else
			st = check ? sgn.check : sgn.status
			puts "#{sgn.name}: #{st}"
			if @god_mode
				return RC_OK if st == :up
				return RC_ERR
			else
				return RC_UP   if st == :up
				return RC_DOWN if st == :down
				return RC_OTHER
			end
		end
	end

	def do_signal(svc_or_group, sig)
		svclist = scan_services

		sgn = svclist[:groups][svc_or_group] ||
				svclist[:services][svc_or_group] ||
				nil

		puts "Sending signal '#{sig}' to '#{svc_or_group}'"
		puts

		if sgn.nil?
			puts "No matching task or group"
			# Emulate weird God exit status
			@god_mode ? RC_OK : RC_USAGE
		else
			sgn.signal(sig) ? RC_OK : RC_ERR
		end
	end

	# Change to the system's service dir, scan for services, and return a hash
	# with two keys:
	#
	#  - :services -- a hash of svcname => Allah::Service instances,
	#     representing the services configured; and
	#  - :groups -- a hash of groupname => Allah::Group instances, representing
	#     the groups that have been configured.
	#  - :ungrouped -- An array of services which were found to have no groups
	#     defined.
	def scan_services
		rv = { :services => {}, :groups => {}, :ungrouped => [] }

		unless File.readable?(svdir)
			$stderr.puts "Unable to access service dir #{svdir}; do you need to run as root?"
			exit RC_TEMP
		end

		begin
			Dir.chdir(svdir)
		rescue SystemCallError => e
			$stderr.puts "Unable to change to service dir: #{e}"
			exit RC_TEMP
		end

		Dir['*'].each do |s|
			File.exists?(File.join(s, 'supervise')) or next
			svc = Allah::Service.new(s)
			rv[:services][svc.name] = svc
			if svc.groups
				svc.groups.each do |g|
					rv[:groups][g] ||= Allah::Group.new(g)
					rv[:groups][g] << svc
				end
			else
				rv[:ungrouped] << svc
			end
		end
		
		return rv
	end

	class Service
		attr_reader :name

		def initialize(svcdir)
			@svcdir = svcdir
			@name = File.basename(svcdir)
		end

		def <=>(other)
			@name <=> other.name
		end

		# Read the service's group file and return the list of groups the
		# service is in, or nil if there is no groups file.
		def groups
			File.read(File.join(@svcdir, 'group')).split(/\s+/)
		rescue
			nil
		end

		def start
			signal("UP")
		end

		def stop
			if @god_mode
				6.times { signal("DOWN"); return 0 if [:down, :unmonitored].include? status; sleep 1 }
				signal("KILL")
			else
				signal("DOWN")
			end
		end

		def restart
			if @god_mode
				stop
				start
			else
				signal("TERM")
			end
		end

		def remove
			File.unlink(@svcdir)
		end

		def monitor
			signal("UP")
		end

		def unmonitor
			signal("ONCE")
		end

		# Send the specified signal to the service.  Returns true
		# if the signal was delivered, or false otherwise
		def signal(sig)
			opt = case sig
				when "UP"         then '-u'
				when "DOWN"       then '-d'
				when "ONCE"       then '-o'
				when "STOP"       then '-p'
				when "CONT"       then '-c'
				when "HUP",   "1" then '-h'
				when "ALRM", "14" then '-a'
				when "INT",   "2" then '-i'
				when "TERM", "15" then '-t'
				when "KILL",  "9" then '-k'
				else
					puts "Unknown signal: #{sig}"
					return false
			end

			rc = Kernel.system("svc #{opt} #{@svcdir}")
			@god_mode ? true : rc
		end

		# Are you up, or down, or confused?
		def status
			if `svstat #{@svcdir}` =~ /: (up|down)/
				st = $1.to_sym
				st = :unmonitored if @god_mode and st == :down
			else
				st = :unknown
			end
			st
		end

		def check
			st = status
			return st unless st == :up

			Dir.chdir(@svcdir) do
				cmd = "./check"
				if File.file?(cmd) and File.executable?(cmd)
					st = :failed unless Kernel.system(cmd)
				end
			end

			st
		end

		def logfile
			Dir["#{@svcdir}/log/*/current"].first
		end
	end

	class Group
		attr_reader :name, :services

		def initialize(name)
			@name = name
			@services = []
		end

		def <=>(other)
			@name <=> other.name
		end

		def <<(svc)
			@services << svc
		end

		def method_missing(method, *args)
			super unless [:start, :stop, :restart, :signal, :remove, :monitor, :unmonitor].include?(method)
			@services.each { |s| s.send(method, *args) }
		end
	end
end

begin
	exit Allah.new(:arguments => ARGV,
	               :svdir => ENV["ALLAH_SERVICE_DIR"],
	               :god_mode => File.basename($0) == "god").run if $0 == __FILE__
rescue => e
	$stderr.puts "#{e.backtrace.first}: #{e} (#{e.class})"
	e.backtrace[1..-1].each { |bt| $stderr.puts "	from #{bt}" }
	exit! Allah::RC_TEMP
end
